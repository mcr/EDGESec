"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[486],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return m}});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},l=Object.keys(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=i.createContext({}),p=function(e){var n=i.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},s=function(e){var n=p(e.components);return i.createElement(d.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},c=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,d=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=p(t),m=a,k=c["".concat(d,".").concat(m)]||c[m]||u[m]||l;return t?i.createElement(k,r(r({ref:n},s),{},{components:t})):i.createElement(k,r({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,r=new Array(l);r[0]=c;var o={};for(var d in n)hasOwnProperty.call(n,d)&&(o[d]=n[d]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var p=2;p<l;p++)r[p]=t[p];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}c.displayName="MDXCreateElement"},8577:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return d},metadata:function(){return p},toc:function(){return s},default:function(){return c}});var i=t(7462),a=t(3366),l=(t(7294),t(3905)),r=["components"],o={slug:"deb",title:"Creating a .deb"},d=void 0,p={unversionedId:"deb",id:"deb",isDocsHomePage:!1,title:"Creating a .deb",description:"Using GitHub Actions (recommended)",source:"@site/docs/deb.md",sourceDirName:".",slug:"/deb",permalink:"/EDGESec/docs/deb",editUrl:"https://github.com/nqminds/docusaurus-template/edit/master/docs/deb.md",tags:[],version:"current",frontMatter:{slug:"deb",title:"Creating a .deb"},sidebar:"someSidebar",previous:{title:"Control Commands",permalink:"/EDGESec/docs/commands"},next:{title:"Issues",permalink:"/EDGESec/docs/issues"}},s=[{value:"Using GitHub Actions (recommended)",id:"using-github-actions-recommended",children:[],level:2},{value:"Build Environment",id:"build-environment",children:[{value:"PBuild",id:"pbuild",children:[],level:3},{value:"Cross-compiling",id:"cross-compiling",children:[],level:3},{value:"Podman",id:"podman",children:[],level:3}],level:2},{value:"Editing the deb",id:"editing-the-deb",children:[],level:2}],u={toc:s};function c(e){var n=e.components,t=(0,a.Z)(e,r);return(0,l.kt)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"using-github-actions-recommended"},"Using GitHub Actions (recommended)"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Update ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/nqminds/EDGESec/debian/changelog"},(0,l.kt)("inlineCode",{parentName:"a"},"debian/changelog"))," and make a new version."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/nqminds/EDGESec/releases/new"},"Create a new GitHub Release"),",\nusing the branch where you pushed the updated changelog."),(0,l.kt)("li",{parentName:"ol"},"After creating a Release (and when it's ",(0,l.kt)("strong",{parentName:"li"},"NOT")," a draft),\nthe ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/nqminds/EDGESec/actions/workflows/create-debs.yml"},"create-debs.yml"),"\nwill automatically compile the ",(0,l.kt)("inlineCode",{parentName:"li"},".deb")," files, and upload them as\npart of the Release you made.")),(0,l.kt)("h2",{id:"build-environment"},"Build Environment"),(0,l.kt)("p",null,"The recommended way of building a ",(0,l.kt)("inlineCode",{parentName:"p"},".deb")," is using the software ",(0,l.kt)("inlineCode",{parentName:"p"},"pbuilder"),"."),(0,l.kt)("p",null,"This will automatically run ",(0,l.kt)("inlineCode",{parentName:"p"},"sudo apt install [...<dependencies>]"),"\nin a ",(0,l.kt)("inlineCode",{parentName:"p"},"chroot")," environment."),(0,l.kt)("p",null,"However, this does mean you need ",(0,l.kt)("inlineCode",{parentName:"p"},"sudo")," access, even though you are only\ninstalling into a ",(0,l.kt)("inlineCode",{parentName:"p"},"chroot")," environment."),(0,l.kt)("p",null,"Additionally, you also need access to ",(0,l.kt)("inlineCode",{parentName:"p"},"chroot"),", so ",(0,l.kt)("inlineCode",{parentName:"p"},"pbuilder")," does not work\nin a container like ",(0,l.kt)("inlineCode",{parentName:"p"},"docker"),"/",(0,l.kt)("inlineCode",{parentName:"p"},"podman"),"."),(0,l.kt)("h3",{id:"pbuild"},"PBuild"),(0,l.kt)("p",null,"Install build dependencies:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt install gnupg pbuilder debhelper -y\n")),(0,l.kt)("p",null,"Then create a pbuild environment (basically a chroot jail).\nThis lets us install apt packages without affecting our OS."),(0,l.kt)("p",null,"Replace ",(0,l.kt)("inlineCode",{parentName:"p"},"--distribution focal")," with the OS you are using."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo pbuilder create --debootstrapopts --variant=buildd --distribution focal\n")),(0,l.kt)("p",null,"Next, you must have ",(0,l.kt)("inlineCode",{parentName:"p"},"USENETWORK=yes")," enabled in your ",(0,l.kt)("inlineCode",{parentName:"p"},"/etc/pbuilderrc")," file.\nThis is so that cmake can download files while building."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ini"},"# Enable network access, since `cmake` downloads dependencies\nUSENETWORK=yes\n")),(0,l.kt)("p",null,"Finally, you can build the ",(0,l.kt)("inlineCode",{parentName:"p"},".deb")," file with:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'pdebuild --debbuildopts "-us -uc"\n')),(0,l.kt)("p",null,"The meaning of the options are:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-debbuildopts <debbuild_opts>"),": Options to pass to ",(0,l.kt)("inlineCode",{parentName:"li"},"debbuild"),". See ",(0,l.kt)("inlineCode",{parentName:"li"},"debbuild")," options above in the ",(0,l.kt)("a",{parentName:"li",href:"#podman"},(0,l.kt)("strong",{parentName:"a"},"Podman"))," section.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"-us -uc"')," means do not sign the source package and ",(0,l.kt)("inlineCode",{parentName:"li"},".changes")," file.")))),(0,l.kt)("p",null,"By default, the ",(0,l.kt)("inlineCode",{parentName:"p"},".deb")," file will be located in ",(0,l.kt)("inlineCode",{parentName:"p"},"/var/cache/pbuilder/result/"),"."),(0,l.kt)("h3",{id:"cross-compiling"},"Cross-compiling"),(0,l.kt)("p",null,"First of all, install ",(0,l.kt)("inlineCode",{parentName:"p"},"pbuilder"),", which automatically downloads dependencies\nand does the cross-compiling for you."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt install gnupg pbuilder debhelper -y\n")),(0,l.kt)("p",null,"Then, edit ",(0,l.kt)("inlineCode",{parentName:"p"},"/etc/pbuilderrc")," and enable the following settings:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ini"},'# Enable network access, since `cmake` downloads dependencies\nUSENETWORK=yes\n# Faster than default, and is requried if we want to do cross-compiling\nPBUILDERSATISFYDEPENDSCMD="/usr/lib/pbuilder/pbuilder-satisfydepends-apt"\n')),(0,l.kt)("p",null,"First of all, we need to overwrite our apt-sources list.\nUbuntu places x86 sources seperately from ARM sources, so we need\nto do some jiggarypokery to get it working."),(0,l.kt)("p",null,"Otherwise, it's just the same command as in ",(0,l.kt)("a",{parentName:"p",href:"#pbuild"},"PBuild"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'OTHER_MIRROR_LIST=(\n  "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports focal main universe"\n  # Ubuntu splits up amd64 and arm64 repos\n  "deb [arch=amd64] http://gb.archive.ubuntu.com/ubuntu focal main universe"\n)\nOTHER_MIRROR=$(IFS=\'|\' ; echo "${OTHER_MIRROR_LIST[*]}")\npdebuild --debbuildopts "-us -uc" -- --override-config --distribution focal --mirror "" --othermirror "$OTHER_MIRROR" --host-arch arm64\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-- ..."),": Options to pass to ",(0,l.kt)("inlineCode",{parentName:"li"},"pbuilder"),":",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"--host-arch arm64"),": Cross-compile for the ",(0,l.kt)("inlineCode",{parentName:"li"},"arm64")," architecture."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"--override-config"),": Needed to regenerate ",(0,l.kt)("inlineCode",{parentName:"li"},"apt")," settings, since we're setting ",(0,l.kt)("inlineCode",{parentName:"li"},"--othermirror")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'--mirror ""'),": Leave blank, since we need to specify ",(0,l.kt)("inlineCode",{parentName:"li"},"[arch=xxx]")," in ",(0,l.kt)("inlineCode",{parentName:"li"},"--othermirror"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'--othermirror "$OTHER_MIRROR"'),":\nThe deb ",(0,l.kt)("inlineCode",{parentName:"li"},"sources.list")," entries for both ",(0,l.kt)("inlineCode",{parentName:"li"},"arm64")," (host) and ",(0,l.kt)("inlineCode",{parentName:"li"},"amd64")," (build)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"--distribution focal"),": Needed since we're regenerating ",(0,l.kt)("inlineCode",{parentName:"li"},"apt")," settings.")))),(0,l.kt)("p",null,"By default, the ",(0,l.kt)("inlineCode",{parentName:"p"},".deb")," file will be located in ",(0,l.kt)("inlineCode",{parentName:"p"},"/var/cache/pbuilder/result/"),"."),(0,l.kt)("h3",{id:"podman"},"Podman"),(0,l.kt)("p",null,"If you want to use podman\n(e.g. since you're using elementary OS, or ",(0,l.kt)("inlineCode",{parentName:"p"},"pbuilder")," doesn't work since you don't have ",(0,l.kt)("inlineCode",{parentName:"p"},"chroot")," support),\nyou can use ",(0,l.kt)("inlineCode",{parentName:"p"},"debuild")," manually."),(0,l.kt)("p",null,"Install .deb build dependencies, as well as the build depenencies for EDGESec (see README.md)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt install gnupg linux-headers-generic ubuntu-dev-tools apt-file -y\n")),(0,l.kt)("p",null,"This will automatically call ",(0,l.kt)("inlineCode",{parentName:"p"},"cmake")," in the background, using multiple threads (e.g. no need for ",(0,l.kt)("inlineCode",{parentName:"p"},"j6"),")"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"debuild -us -uc\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Add the ",(0,l.kt)("inlineCode",{parentName:"li"},"--no-pre-clean")," to prevent ",(0,l.kt)("inlineCode",{parentName:"li"},"debuild")," from recompiling everything.\nThis saves a lot of time during testing."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-us -uc")," means do not sign the source package and ",(0,l.kt)("inlineCode",{parentName:"li"},".changes")," file.")),(0,l.kt)("p",null,"Now the deb should exist in the folder above this folder, e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"cd .."),"."),(0,l.kt)("h2",{id:"editing-the-deb"},"Editing the deb"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Beware of dependencies!\nThe ",(0,l.kt)("inlineCode",{parentName:"p"},"Depends: ${shlibs:Depends}")," line in ",(0,l.kt)("inlineCode",{parentName:"p"},"debian/control")," means we automatically\nscan for shared libs."),(0,l.kt)("p",{parentName:"li"},"However, since we bundle in some shared libs, we must ignore these in ",(0,l.kt)("inlineCode",{parentName:"p"},"debian/control"),",\nusing the ",(0,l.kt)("inlineCode",{parentName:"p"},"-l")," flag to ",(0,l.kt)("inlineCode",{parentName:"p"},"dh_shlibdeps"),".\nThis will tell ",(0,l.kt)("inlineCode",{parentName:"p"},"dh_shlibdeps")," that a folder is our own private shared libs folder.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Build dependencies:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"If we use ",(0,l.kt)("inlineCode",{parentName:"li"},"git"),", make sure you also add ",(0,l.kt)("inlineCode",{parentName:"li"},"ca-certificates"),", otherwise you'll get\ninvalid certificate errors when doing git clones with ",(0,l.kt)("inlineCode",{parentName:"li"},"https"),"."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Creating a new version of the ",(0,l.kt)("inlineCode",{parentName:"p"},".deb"),":"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"To create a new version number for the ",(0,l.kt)("inlineCode",{parentName:"li"},".deb"),", add a new entry to ",(0,l.kt)("inlineCode",{parentName:"li"},"debian/changelog"),"\nwith the version you want, then rebuild the ",(0,l.kt)("inlineCode",{parentName:"li"},".deb"),".")))))}c.isMDXComponent=!0}}]);