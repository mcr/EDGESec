"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[217],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return m}});var l=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,l,i=function(e,n){if(null==e)return{};var t,l,i={},a=Object.keys(e);for(l=0;l<a.length;l++)t=a[l],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)t=a[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=l.createContext({}),u=function(e){var n=l.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=u(e.components);return l.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},p=l.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,s=r(e,["components","mdxType","originalType","parentName"]),p=u(t),m=i,b=p["".concat(c,".").concat(m)]||p[m]||d[m]||a;return t?l.createElement(b,o(o({ref:n},s),{},{components:t})):l.createElement(b,o({ref:n},s))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=p;var r={};for(var c in n)hasOwnProperty.call(n,c)&&(r[c]=n[c]);r.originalType=e,r.mdxType="string"==typeof e?e:i,o[1]=r;for(var u=2;u<a;u++)o[u]=t[u];return l.createElement.apply(null,o)}return l.createElement.apply(null,t)}p.displayName="MDXCreateElement"},1195:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return r},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return s},default:function(){return p}});var l=t(7462),i=t(3366),a=(t(7294),t(3905)),o=["components"],r={slug:"installation",title:"Installation"},c=void 0,u={unversionedId:"installation",id:"installation",isDocsHomePage:!1,title:"Installation",description:"The codebase can be clone from the Github repo. The precompiled installation packages for amd64 and arm64 architectures on a Debian OS can be downloaded from here.",source:"@site/docs/installation.md",sourceDirName:".",slug:"/installation",permalink:"/EDGESec/docs/installation",editUrl:"https://github.com/nqminds/docusaurus-template/edit/master/docs/installation.md",tags:[],version:"current",frontMatter:{slug:"installation",title:"Installation"},sidebar:"someSidebar",previous:{title:"Secure Storage",permalink:"/EDGESec/docs/storage"},next:{title:"Running",permalink:"/EDGESec/docs/running"}},s=[{value:"Dependencies",id:"dependencies",children:[],level:2},{value:"Compile &amp; Build",id:"compile--build",children:[],level:2},{value:"Installation",id:"installation",children:[{value:"Installing to custom location",id:"installing-to-custom-location",children:[],level:3}],level:2},{value:"Testing",id:"testing",children:[],level:2},{value:"Developer Documentation",id:"developer-documentation",children:[],level:2}],d={toc:s};function p(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,l.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The codebase can be clone from the Github ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nqminds/edgesec"},"repo"),". The precompiled installation packages for amd64 and arm64 architectures on a Debian OS can be downloaded from ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nqminds/EDGESec/releases"},"here"),"."),(0,a.kt)("h2",{id:"dependencies"},"Dependencies"),(0,a.kt)("p",null,"On Ubuntu, we need a C compiler, CMake, Doxygen, and libnl libraries:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'sudo apt update\nbuild_dependencies=(\n    cmake # build-tool\n    git # required to download dependencies\n    ca-certificates # required for git+https downloads\n    doxygen texinfo graphviz # documentation\n    build-essential # C and C++ compilers\n    libnl-genl-3-dev libnl-route-3-dev # netlink dependencies\n    automake # required by libmicrohttpd for some reason?\n    autopoint gettext # required by libuuid\n    autoconf # required by compile_sqlite.sh\n    libtool-bin # required by autoconf somewhere\n    pkg-config # seems to be required by nDPI\n    libjson-c-dev # mystery requirement\n    flex bison # required by pcap\n    libgnutls28-dev # required by libmicrohttpd\n    libssl-dev # required by hostapd only. GRPC uses own version, and we compile OpenSSL 3 for EDGESec\n    protobuf-compiler-grpc libprotobuf-dev libgrpc++-dev # GRPC, can be removed if -DBUILD_GRPC_LIB=ON\n    libcmocka-dev # cmocka, can be removed if -DBUILD_CMOCKA_LIB=ON\n    libmnl-dev # libmnl, can be removed if -DBUILD_LIBMNL_LIB=ON\n)\nruntime_dependencies=(\n    dnsmasq\n    jq # required by predictable wifi name script\n)\nsudo apt install -y "${build_dependencies[@]}" "${runtime_dependencies[@]}"\n')),(0,a.kt)("h2",{id:"compile--build"},"Compile & Build"),(0,a.kt)("p",null,"Compiling EDGESec is done with CMake."),(0,a.kt)("p",null,"First, configure ",(0,a.kt)("inlineCode",{parentName:"p"},"cmake")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"build/")," directory by running the following."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir build && cd build && cmake ../\n")),(0,a.kt)("p",null,"Setting ",(0,a.kt)("inlineCode",{parentName:"p"},'-DLIB_MAKEFLAGS="--jobs=$(nproc)"')," will mean that while compiling library dependencies,\n",(0,a.kt)("inlineCode",{parentName:"p"},"make")," commands will run using all CPU cores, greatly speeding this building (set a lower number if you have less RAM)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'cmake -B build/ -S . -DLIB_MAKEFLAGS="--jobs=$(nproc)"\n')),(0,a.kt)("p",null,"To build, you can then run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"make\n")),(0,a.kt)("p",null,"or to built on multiple core run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cmake --build build/ -j4\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"-j4")," means 4 jobs/threads, replace ",(0,a.kt)("inlineCode",{parentName:"p"},"4")," with the amount of cores you want to use, equivalent to ",(0,a.kt)("inlineCode",{parentName:"p"},"make -j4"),"."),(0,a.kt)("p",null,"After succesful compilation the binary will be located in ",(0,a.kt)("inlineCode",{parentName:"p"},"./build/src")," folder."),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("p",null,"You can use the following to also install files into ",(0,a.kt)("inlineCode",{parentName:"p"},"build/edgesec-dist"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# Can do make and install in one step with\n# `cmake --build build/ --target install -j4`\ncmake --install build/\n")),(0,a.kt)("h3",{id:"installing-to-custom-location"},"Installing to custom location"),(0,a.kt)("p",null,"Set ",(0,a.kt)("inlineCode",{parentName:"p"},"-DCMAKE_INSTALL_PREFIX=<YOUR-LOCATION-HERE>")," to build for a different location:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'MAKEFLAGS="--jobs=$(nproc)" cmake -B build/ -S . -DCMAKE_INSTALL_PREFIX=/tmp/example-build\ncmake --build build/ --target install -j4\n')),(0,a.kt)("p",null,"This will also automatically update ",(0,a.kt)("inlineCode",{parentName:"p"},"config.ini")," to have all paths point to the installed location. You can also use the following to install to a different location than the one you built for."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# Will update config.ini, but will not update RPATHS!!!\ncmake --install build/ --prefix <new-location>\n")),(0,a.kt)("p",null,"This will not update the ",(0,a.kt)("inlineCode",{parentName:"p"},"RPATHs")," (since they have to be known at compile time).\nHowever, as we use relative ",(0,a.kt)("inlineCode",{parentName:"p"},"RPATHs"),", as long as you don't change the folder structure,\nit will be fine."),(0,a.kt)("p",null,"Please configure cmake with ",(0,a.kt)("inlineCode",{parentName:"p"},"-DCMAKE_INSTALL_PREFIX")," and recompile if you want to change the RPATH."),(0,a.kt)("h2",{id:"testing"},"Testing"),(0,a.kt)("p",null,"To compile the tests use:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cmake -B build/ -S . # configure CMAKE\ncmake --build build/ -j4 # or make -j4\ncmake --build build/ --target test -j4 # or `make test`\n")),(0,a.kt)("p",null,"To run each test individually, the test binaries can be located in ",(0,a.kt)("inlineCode",{parentName:"p"},"./build/tests")," folder."),(0,a.kt)("h2",{id:"developer-documentation"},"Developer Documentation"),(0,a.kt)("p",null,"To compile the docs from ",(0,a.kt)("inlineCode",{parentName:"p"},"./build")," folder:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"make doxydocs\n")),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"./docs"},(0,a.kt)("inlineCode",{parentName:"a"},"./docs"))," for how to build the developer doxygen documentation website."))}p.isMDXComponent=!0}}]);