"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[853],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var a=r.createContext({}),u=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(a.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,a=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=u(n),m=o,f=p["".concat(a,".").concat(m)]||p[m]||l[m]||s;return n?r.createElement(f,i(i({ref:t},d),{},{components:n})):r.createElement(f,i({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,i=new Array(s);i[0]=p;var c={};for(var a in t)hasOwnProperty.call(t,a)&&(c[a]=t[a]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var u=2;u<s;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5345:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return a},metadata:function(){return u},toc:function(){return d},default:function(){return p}});var r=n(7462),o=n(3366),s=(n(7294),n(3905)),i=["components"],c={slug:"discovery",title:"Device Discovery"},a=void 0,u={unversionedId:"discovery",id:"discovery",isDocsHomePage:!1,title:"Device Discovery",description:"The secure discovery service implements gateway and device discovery suing the network control service and mDNS reflector if available.",source:"@site/docs/discovery.md",sourceDirName:".",slug:"/discovery",permalink:"/EDGESec/docs/discovery",editUrl:"https://github.com/nqminds/docusaurus-template/edit/master/docs/discovery.md",tags:[],version:"current",frontMatter:{slug:"discovery",title:"Device Discovery"},sidebar:"someSidebar",previous:{title:"Network Capture",permalink:"/EDGESec/docs/capture"},next:{title:"Secure Storage",permalink:"/EDGESec/docs/storage"}},d=[],l={toc:d};function p(e){var t=e.components,n=(0,o.Z)(e,i);return(0,s.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"The secure discovery service implements gateway and device discovery suing the network control service and mDNS reflector if available."),(0,s.kt)("p",null,"For the gateway discovery we use the gRPC protocol and in particular we implemented the reverse access module with the following protocol buffer:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'syntax = "proto3";\n\npackage reverse_access;\n\n// The reverse access service definition.\nservice Reverser {\n  // Send client resource to server \n  rpc SendResource (ResourceRequest) returns (ResourceReply) {}\n\n  // Subscribe to client to server commands\n  rpc SubscribeCommand (CommandRequest) returns (stream CommandReply) {}\n}\n\nmessage CommandRequest {\n  string id = 1;\n}\n\nmessage CommandReply {\n  string command = 1;\n  string id = 2;\n}\n\nmessage ResourceRequest {\n  uint32 type = 1;\n  string meta = 2;\n  bytes data = 3;\n}\n\nmessage ResourceReply {\n  uint32 status = 1;\n}\n')),(0,s.kt)("p",null,"The reverse service is used for discovering/listing the connected gateways as well as running generic commands on the gateway."),(0,s.kt)("p",null,"As the reverse name suggests the reverse syncroniser connects to the cloud endpoint and executes a SubscribeCommand gRPC function that puts the synchroniser into the listening mode. Subsequently the cloud endpoint can send commands to the client. If a command involves accessing a resource then the SendResource function is used with the corresponding parameters. "),(0,s.kt)("p",null,"The second option for device discovery is by using a reflector for mDNS traffic. If a connected device wants to advertise its services to other subnets using mDNS than the reflectro intercepts the mDNS packet and forwards it to all available subnets."),(0,s.kt)("p",null,"The third option is given by the device monitoring service, which monitors mDNS, DNS and other traffic data and stores the fingerprint and the qury string into the database for subsequent analaysis. The device discovery process can query the most recent mDNS traffic entry from the fingerprint database and find out the needed source and destination MAC address."))}p.isMDXComponent=!0}}]);