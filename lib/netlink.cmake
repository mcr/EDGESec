# Compile library libnetlink
if (BUILD_NETLINK_LIB AND NOT (BUILD_ONLY_DOCS))
  set(LIBNETLINK_SOURCE_DIR "${CMAKE_SOURCE_DIR}/lib/libnetlink")
  set(LIBNETLINK_INSTALL_ROOT "${CMAKE_CURRENT_BINARY_DIR}/lib")
  set(LIBNETLINK_INSTALL_DIR "${LIBNETLINK_INSTALL_ROOT}/netlink")
  set(LIBNETLINK_INCLUDE_PATH "${LIBNETLINK_INSTALL_DIR}/include")
  set(LIBNETLINK_UAPI_INCLUDE_PATH "${LIBNETLINK_INCLUDE_PATH}/uapi")
  set(LIBNETLINK_LIB_PATH ${LIBNETLINK_INSTALL_DIR}/lib)
  find_library(LIBNETLINK_LIB NAMES libnetlink PATHS "${LIBNETLINK_LIB_PATH}" NO_DEFAULT_PATH)
  if (LIBNETLINK_LIB)
    message("Found libnetlink library: ${LIBNETLINK_LIB}")
  ELSE ()
    execute_process(COMMAND bash ${CMAKE_SOURCE_DIR}/lib/compile_libnetlink.sh ${LIBNETLINK_SOURCE_DIR} ${LIBNETLINK_INSTALL_ROOT})
    find_library(LIBNETLINK_LIB NAMES libnetlink PATHS "${LIBNETLINK_LIB_PATH}" NO_DEFAULT_PATH)
  endif ()
  find_library(LL_MAP_LIB NAMES ll_map PATHS "${LIBNETLINK_LIB_PATH}")
  message("Found ll_map library: ${LL_MAP_LIB}")
  find_library(UTILS_LIB NAMES utils PATHS "${LIBNETLINK_LIB_PATH}")
  message("Found utils library: ${UTILS_LIB}")
  find_library(RT_NAMES_LIB NAMES rt_names PATHS "${LIBNETLINK_LIB_PATH}")
  message("Found rt_names library: ${RT_NAMES_LIB}")
endif ()
